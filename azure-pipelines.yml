trigger:
- master
- rel/*

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  SolutionPath: 'src/CG.Validations'

steps:

- powershell: |
    choco install docfx -y
    if ($lastexitcode -ne 0) {
      throw ("Error installing docfx")
    }
  displayName: "Install docfx"

- powershell: |
    docfx docfx/docfx.json
    if ($lastexitcode -ne 0) {
      throw ("Error generating document")
    }
  displayName: "Generate docs"

- powershell: | 
    git config --global credential.helper store
    Add-Content "$HOME\.git-credentials" "https://$(GIT_PAT):x-oauth-basic@github.com`n"
    git config --global user.email $(OP_USER_EMAIL)
    git config --global user.name $(OP_USER)

    git clone https://github.com/CodeGator/CG.Validations.git -b gh-pages origin_site -q
    Copy-Item origin_site/.git _site -recurse
    CD _site
    git add . -A -q 2>&1
    git commit -m "CI Updates" -q
    git push origin gh-pages -q
  displayName: "Publish docs"  


- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    nugetConfigPath: 'nuget.config'
    feedsToUse: config
    arguments: '--interactive'
    projects: '$(SolutionPath).sln'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: 'build'
    arguments: '--configuration $(BuildConfiguration)'
    projects: '$(SolutionPath).sln'
    
- task: DotNetCoreCLI@2
  displayName: "dotnet test"
  inputs:
    command: 'test'
    projects: '$(SolutionPath).sln'
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    publishTestResults: true
    nobuild: true

- task: PublishCodeCoverageResults@1
  displayName: "publish coverage"
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: 'src/**/coverage.cobertura.xml'
    pathToSources: '$(SolutionPath)'

- task: DotNetCoreCLI@2
  displayName: "dotnet pack"
  inputs:
    command: 'pack'
    arguments: '--configuration $(BuildConfiguration)'    
    packagesToPack: '$(SolutionPath).sln'
    nobuild: true
    versioningScheme: 'off'    

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'codegator'
    versioningScheme: 'off'
    allowPackageConflicts: true    
    



  

