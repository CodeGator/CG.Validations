{
  "api/CG.Validations.Guard.html": {
    "href": "api/CG.Validations.Guard.html",
    "title": "Class Guard",
    "keywords": "Class Guard This class is a singleton implementation of the IGuard interface. Inheritance System.Object Guard Implements IGuard Namespace : CG.Validations Assembly : CG.Validations.dll Syntax public sealed class Guard : object, IGuard Methods Instance() This method creates a new singleton instance of the Declaration public static Guard Instance() Returns Type Description Guard The singleton instance. Implements IGuard"
  },
  "api/CG.Validations.GuardExtensions.html": {
    "href": "api/CG.Validations.GuardExtensions.html",
    "title": "Class GuardExtensions",
    "keywords": "Class GuardExtensions This class contains extensiom methods related to the IGuard type. Inheritance System.Object GuardExtensions Namespace : CG.Validations Assembly : CG.Validations.dll Syntax public static class GuardExtensions : object Methods ThrowIfEmptyGuid(IGuard, Guid, String, String, String, Int32) This method throws an exception if the argValue argument contains an empty GUID instance. Declaration public static IGuard ThrowIfEmptyGuid(this IGuard guard, Guid argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. Guid argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfEmptyGuid(IGuard, Guid, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = Guid.Empty; // throws an exception, since the GUID is empty. Guard.Intance().ThrowIfEmptyGuid(arg, nameof(arg)); } } ThrowIfFalse(IGuard, Boolean, String, String, String, Int32) This method throws an exception if the argValue argument contains a FALSE value. Declaration public static IGuard ThrowIfFalse(this IGuard guard, bool argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Boolean argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfFalse(IGuard, Boolean, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = false; // throws an exception, since the argument is false. Guard.Instance().ThrowIfFalse(arg, nameof(arg)); } } ThrowIfGreaterThan(IGuard, Int32, Int32, String, String, String, Int32) This method will throw an exception if the argValue argument is greater than the amount argument. Declaration public static IGuard ThrowIfGreaterThan(this IGuard guard, int argValue, int amount, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int32 argValue The argument to be validated. System.Int32 amount The amount to be used for validation. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfGreaterThan(IGuard, Int32, Int32, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 2; // make the value to compare it against. var amount = 1; // throws an exception, since the argument is greater than 1. Guard.Instance().ThrowIfGreaterThan(arg, amount, nameof(arg)); } } ThrowIfGreaterThan(IGuard, Int64, Int64, String, String, String, Int32) This method will throw an exception if the argValue argument is greater than the amount argument. Declaration public static IGuard ThrowIfGreaterThan(this IGuard guard, long argValue, long amount, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int64 argValue The argument to be validated. System.Int64 amount The amount to be used for validation. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfGreaterThan(IGuard, Int64, Int64, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 2; // make the value to compare it against. var amount = 1; // throws an exception, since the argument is greater than 1. Guard.Instance().ThrowIfGreaterThan(arg, amount, nameof(arg)); } } ThrowIfGreaterThan(IGuard, TimeSpan, TimeSpan, String, String, String, Int32) This method will throw an exception if the argValue argument is greater than the amount argument. Declaration public static IGuard ThrowIfGreaterThan(this IGuard guard, TimeSpan argValue, TimeSpan amount, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. TimeSpan argValue The argument to be validated. TimeSpan amount The amount to be used for validation. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfGreaterThan(IGuard, TimeSpan, TimeSpan, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new TimeSpan(1, 1, 1); // make the value to compare it against. var amount = new TimeSpan(1, 1, 1); // throws an exception, since the argument is greater than 1. Guard.Instance().ThrowIfGreaterThan(arg, amount, nameof(arg)); } } ThrowIfInvalidDateTime(IGuard, DateTime, String, String, String, Int32) This method throws an exception if the argValue argument contains an invalid DateTime value. Declaration public static IGuard ThrowIfInvalidDateTime(this IGuard guard, DateTime argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. DateTime argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfInvalidDateTime(IGuard, DateTime, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new DateTime(); // throws an exception, since the argument is invalid. Guard.Instance().ThrowIfInvalidDateTime(arg, nameof(arg)); } } ThrowIfLessThan(IGuard, Int32, Int32, String, String, String, Int32) This method will throw an exception if the argValue argument is less than the amount argument. Declaration public static IGuard ThrowIfLessThan(this IGuard guard, int argValue, int amount, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int32 argValue The argument to be validated. System.Int32 amount The amount to be used for validation. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThan(IGuard, Int32, Int32, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 1; // make the value to compare it against. var amount = 2; // throws an exception, since the argument is less than 2. Guard.Instance().ThrowIfLessThan(arg, amount, nameof(arg)); } } ThrowIfLessThan(IGuard, Int64, Int64, String, String, String, Int32) This method will throw an exception if the argValue argument is less than the amount argument. Declaration public static IGuard ThrowIfLessThan(this IGuard guard, long argValue, long amount, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int64 argValue The argument to be validated. System.Int64 amount The amount to be used for validation. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThan(IGuard, Int64, Int64, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 1; // make the value to compare it against. var amount = 2; // throws an exception, since the argument is less than 2. Guard.Instance().ThrowIfLessThan(arg, amount, nameof(arg)); } } ThrowIfLessThan(IGuard, TimeSpan, TimeSpan, String, String, String, Int32) This method will throw an exception if the argValue argument is less than the amount argument. Declaration public static IGuard ThrowIfLessThan(this IGuard guard, TimeSpan argValue, TimeSpan amount, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. TimeSpan argValue The argument to be validated. TimeSpan amount The amount to be used for validation. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThan(IGuard, TimeSpan, TimeSpan, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = new timeSpan(1, 1, 1); // make the value to compare it against. var amount = new TimeSpan(2, 2, 2); // throws an exception, since the argument is less than 2:2:2. Guard.Instance().ThrowIfLessThan(arg, amount, nameof(arg)); } } ThrowIfLessThanOrEqualZero(IGuard, Int32, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is less than or equal to zero. Declaration public static IGuard ThrowIfLessThanOrEqualZero(this IGuard guard, int argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int32 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThanOrEqualZero(IGuard, Int32, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 0; // throws an exception, since the argument is less than or equal to zero. Guard.Instance().ThrowIfLessThanOrEqualZero(arg, nameof(arg)); } } ThrowIfLessThanOrEqualZero(IGuard, Int64, String, String, String, Int32) This method throws an exception if the ' argValue argument contains a value that is less than or equal to zero. Declaration public static IGuard ThrowIfLessThanOrEqualZero(this IGuard guard, long argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int64 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThanOrEqualZero(IGuard, Int64, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 0; // throws an exception, since the argument is less than or equal to zero. Guard.Instance().ThrowIfLessThanOrEqualZero(arg, nameof(arg)); } } ThrowIfLessThanOrEqualZero(IGuard, TimeSpan, String, String, String, Int32) This method throws an if the value of the argValue parameter has a value less than or equal to zero. Declaration public static IGuard ThrowIfLessThanOrEqualZero(this IGuard guard, TimeSpan argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. TimeSpan argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard argument. Examples This example shows how to call the ThrowIfLessThanOrEqualZero(IGuard, TimeSpan, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = Timespan.Zero; // throws an exception, since the argument is less than or equal to zero. Guard.Instance().ThrowIfLessThanOrEqualZero(arg, nameof(arg)); } } ThrowIfLessThanZero(IGuard, Int32, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is less than zero. Declaration public static IGuard ThrowIfLessThanZero(this IGuard guard, int argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int32 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThanZero(IGuard, Int32, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = -1; // throws an exception, since the argument is invalid. Guard.Instance().ThrowIfLessThanZero(arg, nameof(arg)); } } ThrowIfLessThanZero(IGuard, Int64, String, String, String, Int32) This method throws an exception if the argValue argument contains a value that is less than zero. Declaration public static IGuard ThrowIfLessThanZero(this IGuard guard, long argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int64 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfLessThanZero(IGuard, Int64, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = -1L; // throws an exception, since the argument is invalid. Guard.Instance().ThrowIfLessThanZero(arg, nameof(arg)); } } ThrowIfMalformedUri(IGuard, String, String, String, String, Int32) This method throws an exception if the \"argValue\" argument contains a malformed URI. Declaration public static IGuard ThrowIfMalformedUri(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfMalformedUri(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"*\"; // throws an exception, since the URI is malformed. Guard.Instance().ThrowIfMalformedUri(arg, nameof(arg)); } } ThrowIfNotEmptyGuid(IGuard, Guid, String, String, String, Int32) This method throws an exception if the argValue argument does not contain an empty GUID instance. Declaration public static IGuard ThrowIfNotEmptyGuid(this IGuard guard, Guid argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. Guid argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfNotEmptyGuid(IGuard, Guid, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = Guid.Parse(\"some guid value\"); // throws an exception, since the GUID is not empty. Guard.Instance().ThrowIfNotEmptyGuid(arg, nameof(arg)); } } ThrowIfNotNullOrEmpty(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument does not contain a null reference or an empty string. Declaration public static IGuard ThrowIfNotNullOrEmpty(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfNotNullOrEmpty(IGuard, String, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = \"testing, 1, 2, 3\"; // throws an exception, since the string not null or empty. Guard.Instance().ThrowIfNotNullOrEmpty(arg, nameof(arg)); } } ThrowIfNotZero(IGuard, Int32, String, String, String, Int32) This method throws an exception if the argValue argument contains something other than zero. Declaration public static IGuard ThrowIfNotZero(this IGuard guard, int argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int32 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfNotZero(IGuard, Int32, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 1; // throws an exception, since the argument is not zero. Guard.Instance().ThrowIfNotZero(arg, nameof(arg)); } } ThrowIfNotZero(IGuard, Int64, String, String, String, Int32) This method throws an exception if the argValue argument contains something other than zero. Declaration public static IGuard ThrowIfNotZero(this IGuard guard, long argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int64 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfZero(IGuard, Int64, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 1; // throws an exception, since the argument is not zero. Guard.Instance().ThrowIfNotZero(arg, nameof(arg)); } } ThrowIfNull(IGuard, Object, String, String, String, Int32) This method throws an exception if the argValue argument contains a null reference. Declaration public static IGuard ThrowIfNull(this IGuard guard, object argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.Object argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard argument. ThrowIfNullOrEmpty(IGuard, String, String, String, String, Int32) This method throws an exception if the argValue argument contains a null reference or an empty string. Declaration public static IGuard ThrowIfNullOrEmpty(this IGuard guard, string argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard instance to use for the operation. System.String argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard argument. ThrowIfTrue(IGuard, Boolean, String, String, String, Int32) This method throws an exception if the argValue argument contains a TRUE value. Declaration public static IGuard ThrowIfTrue(this IGuard guard, bool argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Boolean argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfTrue(IGuard, Boolean, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = true; // throws an exception, since the argument is true. Guard.Instance().ThrowIfTrue(arg, nameof(arg)); } } ThrowIfZero(IGuard, Int32, String, String, String, Int32) This method throws an exception if the argValue argument contains a zero. Declaration public static IGuard ThrowIfZero(this IGuard guard, int argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int32 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfZero(IGuard, Int32, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 0; // throws an exception, since the argument is zero. Guard.Instance().ThrowIfZero(arg, nameof(arg)); } } ThrowIfZero(IGuard, Int64, String, String, String, Int32) This method throws an exception if the argValue argument contains a zero. Declaration public static IGuard ThrowIfZero(this IGuard guard, long argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. System.Int64 argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfZero(IGuard, Int64, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = 0; // throws an exception, since the argument is zero. Guard.Instance().ThrowIfZero(arg, nameof(arg)); } } ThrowIfZero(IGuard, TimeSpan, String, String, String, Int32) This method throws an exception if the argValue argument contains an empty time span value. Declaration public static IGuard ThrowIfZero(this IGuard guard, TimeSpan argValue, string argName, string memberName = \"\", string sourceFilePath = \"\", int sourceLineNumber = 0) Parameters Type Name Description IGuard guard The guard to use for the operation. TimeSpan argValue The argument to test. System.String argName The name of the argument. System.String memberName Not used. Supplied by the compiler. System.String sourceFilePath Not used. Supplied by the compiler. System.Int32 sourceLineNumber Not used. Supplied by the compiler. Returns Type Description IGuard The guard value. Examples This example shows how to call the ThrowIfZero(IGuard, TimeSpan, String, String, String, Int32) method. class TestClass { static void Main() { // make an invalid argument. var arg = TimeSpan.Zero; // throws an exception, since the argument is invalid. Guard.Instance().ThrowIfZero(arg, nameof(arg)); } }"
  },
  "api/CG.Validations.html": {
    "href": "api/CG.Validations.html",
    "title": "Namespace CG.Validations",
    "keywords": "Namespace CG.Validations Classes Guard This class is a singleton implementation of the IGuard interface. GuardExtensions This class contains extensiom methods related to the IGuard type. Interfaces IGuard This interface represents an object that validates parameters."
  },
  "api/CG.Validations.IGuard.html": {
    "href": "api/CG.Validations.IGuard.html",
    "title": "Interface IGuard",
    "keywords": "Interface IGuard This interface represents an object that validates parameters. Namespace : CG.Validations Assembly : CG.Validations.dll Syntax public interface IGuard Extension Methods GuardExtensions.ThrowIfNull(IGuard, Object, String, String, String, Int32) GuardExtensions.ThrowIfNullOrEmpty(IGuard, String, String, String, String, Int32) GuardExtensions.ThrowIfLessThanZero(IGuard, Int32, String, String, String, Int32) GuardExtensions.ThrowIfLessThanZero(IGuard, Int64, String, String, String, Int32) GuardExtensions.ThrowIfZero(IGuard, TimeSpan, String, String, String, Int32) GuardExtensions.ThrowIfInvalidDateTime(IGuard, DateTime, String, String, String, Int32) GuardExtensions.ThrowIfFalse(IGuard, Boolean, String, String, String, Int32) GuardExtensions.ThrowIfTrue(IGuard, Boolean, String, String, String, Int32) GuardExtensions.ThrowIfLessThanOrEqualZero(IGuard, Int32, String, String, String, Int32) GuardExtensions.ThrowIfLessThanOrEqualZero(IGuard, Int64, String, String, String, Int32) GuardExtensions.ThrowIfLessThanOrEqualZero(IGuard, TimeSpan, String, String, String, Int32) GuardExtensions.ThrowIfLessThan(IGuard, Int32, Int32, String, String, String, Int32) GuardExtensions.ThrowIfLessThan(IGuard, Int64, Int64, String, String, String, Int32) GuardExtensions.ThrowIfLessThan(IGuard, TimeSpan, TimeSpan, String, String, String, Int32) GuardExtensions.ThrowIfGreaterThan(IGuard, Int32, Int32, String, String, String, Int32) GuardExtensions.ThrowIfGreaterThan(IGuard, Int64, Int64, String, String, String, Int32) GuardExtensions.ThrowIfGreaterThan(IGuard, TimeSpan, TimeSpan, String, String, String, Int32) GuardExtensions.ThrowIfZero(IGuard, Int32, String, String, String, Int32) GuardExtensions.ThrowIfZero(IGuard, Int64, String, String, String, Int32) GuardExtensions.ThrowIfNotZero(IGuard, Int64, String, String, String, Int32) GuardExtensions.ThrowIfNotZero(IGuard, Int32, String, String, String, Int32) GuardExtensions.ThrowIfNotNullOrEmpty(IGuard, String, String, String, String, Int32) GuardExtensions.ThrowIfEmptyGuid(IGuard, Guid, String, String, String, Int32) GuardExtensions.ThrowIfNotEmptyGuid(IGuard, Guid, String, String, String, Int32) GuardExtensions.ThrowIfMalformedUri(IGuard, String, String, String, String, Int32)"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Validation.dll contains parameter validation used by other CodeGator projects."
  }
}